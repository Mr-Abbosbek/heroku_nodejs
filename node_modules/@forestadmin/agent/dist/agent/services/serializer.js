"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const json_api_serializer_1 = __importDefault(require("json-api-serializer"));
const id_1 = __importDefault(require("../utils/id"));
class Serializer {
    constructor(options) {
        // No need to keep references to serializers for outdated schemas => weakmap.
        this.serializers = new WeakMap();
        this.prefix = options.prefix;
    }
    serialize(collection, data) {
        const result = this.getSerializer(collection).serialize(collection.name, data);
        this.stripUndefinedsInPlace(result);
        return result;
    }
    deserialize(collection, body) {
        return this.getSerializer(collection).deserialize(collection.name, body);
    }
    serializeWithSearchMetadata(collection, data, searchValue) {
        const results = this.serialize(collection, data);
        if (searchValue && searchValue.trim().length > 0) {
            const resultsData = results.data;
            const decorators = resultsData.reduce((decorator, record) => {
                const search = Object.keys(record.attributes).filter(attribute => {
                    const value = record.attributes[attribute];
                    return value && value.toString().toLowerCase().includes(searchValue.toLowerCase());
                });
                if (search.length === 0) {
                    return decorator;
                }
                return { ...decorator, [Object.keys(decorator).length]: { id: record.id, search } };
            }, {});
            if (Object.values(decorators).length === 0) {
                return results;
            }
            results.meta = { decorators };
        }
        return results;
    }
    getSerializer(collection) {
        if (this.serializers.has(collection.schema)) {
            return this.serializers.get(collection.schema);
        }
        const serializer = new json_api_serializer_1.default();
        for (const sibling of collection.dataSource.collections) {
            this.registerCollection(sibling, serializer);
            this.serializers.set(sibling.schema, serializer);
        }
        return serializer;
    }
    registerCollection(collection, serializer) {
        serializer.register(collection.name, {
            id: 'forestId',
            relationships: this.buildRelationshipsConfiguration(collection),
            beforeSerialize: (data) => {
                const copy = { ...data };
                copy.forestId = id_1.default.packId(collection.schema, data);
                return copy;
            },
            afterDeserialize: (data) => {
                const copy = { ...data };
                if (data.forestId) {
                    const parts = id_1.default.unpackId(collection.schema, data.forestId);
                    const primaryKeys = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(collection.schema);
                    primaryKeys.forEach((field, index) => {
                        copy[field] = parts[index];
                    });
                }
                delete copy.forestId;
                return copy;
            },
        });
    }
    buildRelationshipsConfiguration(collection) {
        const relationships = {};
        const urlPrefix = `${this.prefix}/${collection.name}`;
        for (const [name, field] of Object.entries(collection.schema.fields)) {
            if (field.type === 'ManyToOne' || field.type === 'OneToOne') {
                relationships[name] = {
                    type: field.foreignCollection,
                    deserialize: (data) => {
                        const foreignCollection = collection.dataSource.getCollection(field.foreignCollection);
                        return id_1.default.unpackId(foreignCollection.schema, data.id);
                    },
                };
            }
            if (field.type === 'ManyToMany' || field.type === 'OneToMany') {
                relationships[name] = {
                    type: field.foreignCollection,
                    links: (data) => ({
                        related: {
                            href: `${urlPrefix}/${data.forestId}/relationships/${name}`,
                        },
                    }),
                };
            }
        }
        return relationships;
    }
    stripUndefinedsInPlace(record) {
        if (record === null || typeof record !== 'object') {
            return;
        }
        const indexable = record;
        for (const key of Object.keys(indexable)) {
            if (indexable[key] === undefined) {
                delete indexable[key];
            }
            else {
                this.stripUndefinedsInPlace(indexable[key]);
            }
        }
    }
}
exports.default = Serializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZ2VudC9zZXJ2aWNlcy9zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBS3lDO0FBQ3pDLDhFQUFvRDtBQUdwRCxxREFBa0M7QUFLbEMsTUFBcUIsVUFBVTtJQUs3QixZQUFZLE9BQTBCO1FBSnRDLDZFQUE2RTtRQUM1RCxnQkFBVyxHQUFpRCxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBSXpGLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUMvQixDQUFDO0lBRUQsU0FBUyxDQUFDLFVBQXNCLEVBQUUsSUFBK0I7UUFDL0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELFdBQVcsQ0FBQyxVQUFzQixFQUFFLElBQWE7UUFDL0MsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCwyQkFBMkIsQ0FDekIsVUFBc0IsRUFDdEIsSUFBa0IsRUFDbEIsV0FBbUI7UUFFbkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFlLENBQUM7UUFFL0QsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDaEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQW9CLENBQUM7WUFDakQsTUFBTSxVQUFVLEdBQUcs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