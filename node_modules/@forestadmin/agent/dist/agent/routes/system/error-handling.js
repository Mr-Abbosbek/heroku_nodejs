"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koa_1 = require("koa");
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const types_1 = require("../../types");
const base_route_1 = __importDefault(require("../base-route"));
class ErrorHandling extends base_route_1.default {
    constructor() {
        super(...arguments);
        this.type = types_1.RouteType.ErrorHandler;
    }
    setupRoutes(router) {
        router.use(this.errorHandler.bind(this));
    }
    async errorHandler(context, next) {
        try {
            await next();
        }
        catch (e) {
            let status = e.status || types_1.HttpCode.InternalServerError;
            let message = 'Unexpected error';
            if (e instanceof koa_1.HttpError ||
                e instanceof datasource_toolkit_1.ValidationError ||
                e instanceof datasource_toolkit_1.UnprocessableError ||
                e instanceof datasource_toolkit_1.ForbiddenError) {
                message = e.message;
                switch (true) {
                    case e instanceof datasource_toolkit_1.ValidationError:
                        status = types_1.HttpCode.BadRequest;
                        break;
                    case e instanceof datasource_toolkit_1.ForbiddenError:
                        status = types_1.HttpCode.Forbidden;
                        break;
                    case e instanceof datasource_toolkit_1.UnprocessableError:
                        status = types_1.HttpCode.Unprocessable;
                        break;
                    default:
                }
            }
            context.response.status = status;
            context.response.body = { errors: [{ detail: message }] };
            if (!this.options.isProduction) {
                process.nextTick(() => this.debugLogError(context, e));
            }
        }
    }
    debugLogError(context, error) {
        const { request } = context;
        const query = JSON.stringify(request.query, null, ' ')?.replace(/"/g, '');
        console.error('');
        console.error(`\x1b[33m===== An exception was raised =====\x1b[0m`);
        console.error(`${request.method} \x1b[34m${request.path}\x1b[36m?${query}\x1b[0m`);
        if (request.method === 'POST' || request.method === 'PUT' || request.method === 'PATCH') {
            const body = JSON.stringify(request.body, null, ' ')?.replace(/"/g, '');
            console.error('');
            console.error(`Body \x1b[36m${body}\x1b[0m`);
        }
        console.error('');
        console.error('\x1b[31m', error.message, '\x1b[0m');
        console.error('');
        console.error(error.stack);
        console.error(`\x1b[33m===================================\x1b[0m`);
        console.error('');
    }
}
exports.default = ErrorHandling;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYWdlbnQvcm91dGVzL3N5c3RlbS9lcnJvci1oYW5kbGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDZCQUErQztBQUMvQyx3RUFJeUM7QUFHekMsdUNBQWtEO0FBQ2xELCtEQUFzQztBQUV0QyxNQUFxQixhQUFjLFNBQVEsb0JBQVM7SUFBcEQ7O1FBQ0UsU0FBSSxHQUFHLGlCQUFTLENBQUMsWUFBWSxDQUFDO0lBaUVoQyxDQUFDO0lBL0RDLFdBQVcsQ0FBQyxNQUFjO1FBQ3hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFnQixFQUFFLElBQVU7UUFDckQsSUFBSTtZQUNGLE1BQU0sSUFBSSxFQUFFLENBQUM7U0FDZDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxnQkFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQ3RELElBQUksT0FBTyxHQUFHLGtCQUFrQixDQUFDO1lBRWpDLElBQ0UsQ0FBQyxZQUFZLGVBQVM7Z0JBQ3RCLENBQUMsWUFBWSxvQ0FBZTtnQkFDNUIsQ0FBQyxZQUFZLHVDQUFrQjtnQkFDL0IsQ0FBQyxZQUFZLG1DQUFjLEVBQzNCO2dCQUNBLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUVwQixRQUFRLElBQUksRUFBRTtvQkFDWixLQUFLLENBQUMsWUFBWSxvQ0FBZTt3QkFDL0IsTUFBTSxHQUFHLGdCQUFRLENBQUMsVUFBVSxDQUFDO3dCQUM3QixNQUFNO29CQUNSLEtBQUssQ0FBQyxZQUFZLG1DQUFjO3dCQUM5QixNQUFNLEdBQUcsZ0JBQVEsQ0FBQyxTQUFTLENBQUM7d0JBQzVCLE1BQU07b0JBQ1IsS0FBSyxDQUFDLFlBQVksdUNBQWtCO3dCQUNsQyxNQUFNLEdBQUcsZ0JBQVEsQ0FBQyxhQUFhLENBQUM7d0JBQ2hDLE1BQU07b0JBQ1IsUUFBUTtpQkFDVDthQUNGO1lBRUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBRTFELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtnQkFDOUIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hEO1NBQ0Y7SUFDSCxDQUFDO0lBRU8sYUFBYSxDQUFDLE9BQWdCLEVBQUUsS0FBWTtRQUNsRCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBRTVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQztRQUNwRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sWUFBWSxPQUFPLENBQUMsSUFBSSxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUM7UUFFbkYsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtZQUN2RixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixJQUFJLFNBQVMsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBbEVELGdDQWtFQyJ9