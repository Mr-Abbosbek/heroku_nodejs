import { ModelDefined } from 'sequelize';
import { AggregateResult, Aggregation, BaseCollection, Caller, DataSource, Filter, Logger, PaginatedFilter, Projection, RecordData } from '@forestadmin/datasource-toolkit';
export default class SequelizeCollection extends BaseCollection {
    protected model: ModelDefined<any, any>;
    private col;
    private fn;
    private aggregationUtils;
    private queryConverter;
    constructor(name: string, datasource: DataSource, model: ModelDefined<any, any>, logger?: Logger);
    create(caller: Caller, data: RecordData[]): Promise<RecordData[]>;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    delete(caller: Caller, filter: Filter): Promise<void>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
}
//# sourceMappingURL=collection.d.ts.map